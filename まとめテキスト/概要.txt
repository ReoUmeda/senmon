HTTP/2
1.昨今のWebの状況
最近のWebサイトではWebサーバとブラウザ間でやり取りをしなければならないデータの量が増えてきている。
そのため昔よりページ全体が表示されるのに遅くなってしまう。複数のコネクションを同時に使いデータを早く
送る方法が存在するがサーバやクライアントの付加を増やしてしまい余計に遅くさせてしまう可能性がある。
また、あるHTTPのリクエストに対する応答が遅くなりなってしまい、先頭の応答が処理中であるため後続の応答まで
全てブロックされるというHTTP/1.1の仕様もあり、コネクション数を増やしても効果が得られないことがある。
2. HTTPの歴史
　HTTPは1990年ごろ素粒子物理学の研究所であるCERNのティム・バーナーズ・リー氏がHTMLと共にCERN内の
情報にアクセスするために設計をした。HTTP/0.9はテキストがメインの簡単なやり取りのみだったがその後1996年に
HTTP/1.0の仕様が公開されContent-Typeのような各種ヘッダが追加され音楽や画像、動画などの様々なデータの
やり取りに対応した。1999年に公開されたHTTP/1.1は複数のデータを効率よく転送するための持続的接続や
プロキシの利用等を想定した仕様になっていた。持続的接続によってTCP接続を毎回行わずに繋いだままにして
他のデータも通信していくことができる。また2000年からは日本では回線がADSLになりさらに今では光回線となり
通信速度は速くなっていった。回線が速くなったためにより多くのデータのやり取りが出来るため一つのページを
構成する要素が多くなったりデータ量が大きくなったりするためページサイズは増え続けていっている。
よって無駄になってしまっている部分を改良する必要がある。

3. HTTP/2の仕様
HTTP/2では実質的な転送速度を向上させることを目的としている。そのために通信路を仮想的に多重化して
素早いレスポンスを実現しつつ，データ圧縮で送信するデータを少なくしている。
　またHTTP/2に対応していることを確認することによってHTTP/1.1からHTTP/2の通信に移行するようにすることで
HTTP/2に対応していなくてもHTTP/1.1で通信を可能として互換性を保つようにしている。
3.1 バイナリの使用
HTTP/1.1のときはテキスト形式を使っていたがHTTP/2は高速化のためコマンドやパラメータの送信データを
「フレーム」というバイナリ形式で送信するようになりフレームでHTTP/2はやり取りをするようになっている。
そのようにすると小さな容量で転送ができテキストプロトコルとは違い空白の処理などがなく決まりきった形に
なっているため解析がしやすくなり間違を少なくすることが出来る。
3.2 多重化
また「ストリーム」という仮想的な通信路を作りそれを使い双方向に「フレーム」を送受信する。
1つのコネクションで複数のストリームを作るとHTTP/1.1での複数のコネクションを使ったのと
同等以上やり取りが出来，ルーターやファイアウォール、プロキシサーバなどのネットワーク全体に対する負担が
少なくなる。そのためHTTP/1.1とは違いクライアントとサーバ間のコネクションは1つだけにしたほうが
良いようになっている。
HTTP/1.1でも「パイプライン」機能を使えば、1つのコネクションで複数のリクエストを連続して送信することが
可能だったが、その場合は、レスポンスは送信したリクエスト順になる。だがHTTP/2のストリームでは
レスポンスの順番を変更できるので、例えばサーバ側の処理が重い場合は、それ以外の軽い処理の
レスポンスを先に返す、といったことが可能になる。
ストリームには「優先度」を指定することもでき、クライアントは後から優先度の高いリクエストを送って、
その結果を先に返すようにサーバに対して要求できる優先度制御がある。例えば文字よりも表示するために
時間のかかる画像を優先度を上げ先に送って貰うことができるようになる。
　HTTP/2では通信の状態を制御する機能として、「フロー制御」機能も用意されている。
一度に送信可能なデータ量を抑制して受信側のバッファがあふれて容量不足になるのを防いだり、
逆に一度に送受信できるデータを大きく指定して、巨大なデータを効率よく送信させたりできる。
HTTP/1.1ではTCP/IPのネットワーク機能を実現するために必要なプロトコルスタックに含まれる
ウィンドウ制御に依存していたが、HTTP/2ではWebサーバやアプリケーションがある程度制御できるようになる。
　HTTP/2では、より信頼性の高いエラー処理ができるようになっている。 
HTTP/1.1ではエラーが発生した場合、サーバがそのリクエストを受け付けて処理したのか、
それとも単にリクエストが届いていないのか、などを区別する方法がなかった。処理内容によっては、
リクエストを再送して再実行すると不具合を起こすものもあり、注意してシステムを設計する必要があるが
HTTP/2では、ストリームを使うことにより、どのストリーム番号の処理まで完了したかをクライアント側から
確実に確認できるようになっており、より信頼性の高いシステムを構築できる。
3.3 ヘッダ圧縮
　HTTPのリクエストとレスポンスには、「HTTPヘッダ」と呼ばれるテキストデータが含まれている。
この部分は長さがある割には決まった文字列も多く、また連続する複数のHTTPヘッダを観測して比較すると、
その差が少ないことが多い。そこで、このHTTPヘッダー部分を圧縮できれば通信データの削減につながる。
もし1ページが約80個の要素で構成されており、各リクエストが1400byteのヘッダーを持つと仮定すると
ヘッダーの送出だけで7-8ラウンドトリップが必要となってしまうため圧縮することによりパケットの数を
減らすことになりラウンドトリップが減るためパフォーマンスの向上が期待できる。そのためHTTP/2では
「HPACK」という方法が採用されている。
　HPACKはハフマン符号とヘッダの差分情報のみを送るReference Set、またよく使うヘッダと値をペアにして
IDを登録し設定されたIDのやりとりによってヘッダを送信するStatic Tableによってできている。
3.4 サーバプッシュによるデータ送信
サーバプッシュによるデータ送信によってWebサーバ側からWebブラウザに対して、あらかじめ必要となる
データを送信しておく機能であり、ブラウザがHTMLを解析するまで他の必要な要素のリクエストを出すことが
出来ないブラウザにサーバはページを表示をするために必要な画像などを送ることによりラウンドトリップを
減らすことが出来る。

4.HTTP/2今後
HTTP/2を使うためにはサーバ側とブラウザ側の両方が対応していく必要があるが主要ブラウザの最新バージョンは
HTTP/2に対応しており「Windows10」の「Internet Explorer 11」、「Firefox 36」、「Chrome 40」などがある。
　HTTP/2ではTLS利用が必須ではなくなったがChromeやFirefoxではTLS利用をしたHTTP/2のみをサポートするなど
セキュリティ面でも良くなっていくと考えられる。
HTTP/2はまだIETFに承認されてRFCとして文章化されている最中でありHTTP/1.1に最適化されていると
単にHTTP/2に変えるだけではページの表示は遅くなる可能性もありまだHTTP/2の恩恵を受けるためには時間がかかる。




http://www.atmarkit.co.jp/ait/articles/1409/18/news135.html
http://japan.zdnet.com/article/35061196/
http://http2.info/faq.html#why-revise-http
http://ja.wikipedia.org/wiki/Hypertext_Transfer_Protocol
http://ja.wikipedia.org/wiki/%E3%83%86%E3%82%A3%E3%83%A0%E3%83%BB%E3%83%90%E3%83%BC%E3%83%8A%E3%83%BC%E3%82%BA%EF%BC%9D%E3%83%AA%E3%83%BC#cite_note-proposal-4
